# -*- coding: utf-8 -*-
"""classify_handwritten.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1toPkMncbK9quiTTEcrlggybAWydK2nSY

# **Using Keras to classify handwritten**

1-prepare & explore data
"""

import numpy as np
import pandas as pd

#import pachages
from tensorflow import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Activation
from keras.optimizers import SGD
from keras.utils import plot_model

#load the training and testing data
# (X_train), (y_train) ara the training images and lables
# (X_test), (X_test) are the test images and labels
(X_train, Y_train),(X_test, Y_test)= mnist.load_data()

X_train.shape,Y_train.shape

X_test.shape,Y_test.shape

X_train= X_train.reshape(60000,784)
X_test= X_test.reshape(10000,784)

X_train,Y_train
X_test,Y_test

from keras.src.utils import np_utils
# The labels indicate the value of the digit depictd in the images.
# we want to convert this into a 10-entary encoded vector comprised of 0s and 1 in the entry corresponding to the digit.
# For example, 4 is mapped to [0,0,0,0,1,0,0,0,0,0]
# Conversely ,our network will have 10 output neurons.
classes = 10
Y_train = np_utils.to_categorical(Y_train,classes)
Y_test = np_utils.to_categorical(Y_test,classes)

Y_train,Y_test

"""2- Define the neural network architecture"""

# Before calling our main funcation we need to set :
## the size of the input layer (the size of the MNIST images),
## the number of hidden neurons,
## the number of epochs to train the network,
## the mini batch size:
input_size = 784
batch_size = 100
hidden_neurons = 100
epochs = 100

from keras.src.engine import sequential
model = Sequential([
    Dense(hidden_neurons,input_dim=input_size),
    Activation('sigmoid'),
    Dense(classes),
    Activation('softmax')
    ])

"""3- Compile the neural net"""

from keras.src.mixed_precision.loss_scale_optimizer import optimizer
model.compile(loss='categorical_crossentropy', metrics =['accuracy'], optimizer='sgd')

keras.utils.plot_model(model, show_shapes=True, rankdir="LR")

"""4- Fit/train the neural net"""

model.fit(X_train, Y_train, batch_size= 64, epochs= 10, verbose= 1)

"""5- Evalute the nural net"""

score = model.evaluate(X_test, Y_test,verbose=1)
print("Test accuarcy:", score[1])

"""6- Make prediction/classification for unseen data"""

#not yet until we enhanced the results
predictions = model.predict(X_test)
predictions

"""To see what the network has learned, we can visualize the weights of the hidden layer."""

import matplotlib.pyplot as plt
import matplotlib.cm as cm
import numpy as np

weights = model.layers[0].get_weights()[0]

fig = plt.figure(figsize=(10, 10))

for neuron in range(hidden_neurons):
    ax = fig.add_subplot(10, 10, neuron + 1)
    ax.axis("off")
    ax.imshow(np.reshape(weights[:, neuron], (28, 28)), cmap=cm.Greys_r)

plt.savefig("neuron_images.png", dpi=300)
plt.show()